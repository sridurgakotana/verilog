
// DESIGN CODE
// 4-bit parallel adder
module parallel_adder(a,b,cin,sum,cout);
  input [3:0] a,b;
          input cin;
          output [3:0] sum;
          output cout;
          assign {cout, sum} = a + b+ cin;
          endmodule


// TESTBENCH CODE
module tb;
  reg [3:0] a,b;
  reg cin;
  wire [3:0] sum;
  wire cout;
  
  parallel_adder u1(.sum(sum),.cout(cout),.a(a),.b(b),.cin(cin));
  initial
    begin
      a = 4'b0001; b = 4'b0010; cin = 1'b0; #15;
      a = 4'b0111; b = 4'b0011; cin = 1'b1; #15;
      a = 4'b0011; b = 4'b0010; cin = 1'b1; #15;
      a = 4'b1110; b = 4'b0110; cin = 1'b0; #15;
    end
  initial
    begin
      $monitor("a=%b, b=%b, cin=%b, sum=%b, cout=%b", a,b,cin,sum,cout);
    end
endmodule

//OUTPUT:
          a=0001, b=0010, cin=0, sum=0011, cout=0
# KERNEL: a=0111, b=0011, cin=1, sum=1011, cout=0
# KERNEL: a=0011, b=0010, cin=1, sum=0110, cout=0
# KERNEL: a=1110, b=0110, cin=0, sum=0100, cout=1
