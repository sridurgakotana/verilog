// DESIGN CODE
//Gray Code to Binary code Converter
module gray_to_binary (g,b);
  input [3:0] g;
  output [3:0] b;
  assign b[3] = g[3];
  assign b[2] = g[3] ^ g[2];
  assign b[1] = g[2] ^ g[1];
  assign b[0] = g[1] ^ g[0];
endmodule


// TESTBENCH CODE
module tb;
  reg [3:0] g;
  wire [3:0] b;
  gray_to_binary u1 (.g(g),.b(b));
  
  initial begin
   g = 4'b0000; #10;
   g = 4'b0001; #10;
   g = 4'b0010; #10
   g = 4'b0011; #10;
  end
  
  initial begin
    $monitor("g = %b, b = %b",g,b);
  end
endmodule

//OUTPUT:
          g = 0000, b = 0000
# KERNEL: g = 0001, b = 0001
# KERNEL: g = 0010, b = 0011
# KERNEL: g = 0011, b = 0010
